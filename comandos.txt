git init- inicializa el repositorio de git
git add . – Agrega todos los cambios en todos los archivos al área de staging
git status – Para ver el estado de la BD sí se han hecho cambios, pero no se han agregado, ahí saldrá
git show - Muestra todos los cambios históricos hechos y sus detalles (qé cambió, cuándo y quién los hizo)
git commit -m -Agrega definitivamente los cambios hechos al repositorio, se puede poner un comentario para indicar que cambió
git commit -a
git commit -am "asddsa"  - le ahce add a los archivos que ya he comiteado antes y lo comitea, en un solo paso

git push -envía los cambios al repositorio remoto
git pull -Agrega los cambios del commit más nuevo al repositorio local
git checkout: traer cambios realizados
git rm --cached archivo.extensión: se utiliza para devolver el archivo que se tiene en ram. Cuando escribimos git add, lo devuelve a estado natural mientras está en staging.
git config --list: muestra la lista de configuración de git
git config --list --show-origin: rutas de acceso a la configuración de git
git log archivo.extensión: muestra la historia del archivo
git diff extención1 extención2 : me compara dos versiones del git, del archivo la extención se encuentra con git log
git reset --soft: Borramos todo el historial y los registros de Git pero guardamos los cambios que tengamos en Staging, así podemos aplicar las últimas actualizaciones a un nuevo commit.
git reset --mixed [SHA 1]: elimina los cambios hasta el working area
git reset --hard: Borra todo. Todo todito, absolutamente todo. Toda la información de los commits y del área de staging se borra del historial.
git reset HEAD
git rm --cached: Elimina los archivos de nuestro repositorio local y del área de staging, pero los mantiene en nuestro disco duro. Básicamente le dice a Git que deje de trackear el historial de cambios de estos archivos, por lo que pasaran a un estado untracked.
git rm --force: Elimina los archivos de Git y del disco duro. Git siempre guarda todo, por lo que podemos acceder al registro de la existencia de los archivos, de modo que podremos recuperarlos si es necesario (pero debemos usar comandos más avanzados).

git merge [nombre de la branch]     -Hace un merge de la rama a tu posición actual
para hacer un merge, lo ideal es pararte en master o en tu rama principal, para evitar que una rama secundaria se te convierta en la principal

git remote add origin [URL]	-te permite enlazarte con github
git remote 			-indica si si existe el origin
git remote -v			- muestra verbalmente las direcciones para hacer fetch o push
git push origin master		-enviarle al origen la rama master
git pull origin master		-se trae los cambios y cosas desde github
git pull origin main --allow-unrelated-histories		-permite fusionar los nuevos archivos del github con tu repositorio local

/////////////////
pwd: Nos muestra la ruta de carpetas en la que te encuentras ahora mismo.

mkdir: Nos permite crear carpetas (por ejemplo, mkdir Carpeta-Importante).

touch: Nos permite crear archivos (por ejemplo, touch archivo.txt).
touch archivo.extensión: crear archivo vacío

rm: Nos permite borrar un archivo o carpeta (por ejemplo, rm archivo.txt). Mucho cuidado con este comando, puedes borrar todo tu disco duro.
rm archivo.extensión: Eliminación de archivo

cat: Ver el contenido de un archivo (por ejemplo, cat nombre-archivo.txt).

ls: Nos permite cambiar ver los archivos de la carpeta donde estamos ahora mismo. Podemos usar uno o más argumentos para ver más información sobre estos archivos (los argumentos pueden ser -- + el nombre del argumento o - + una sola letra o shortcut por cada argumento).
- ls -a: Mostrar todos los archivos, incluso los ocultos.
- ls -l: Ver todos los archivos como una lista.
- ls -al: muestra todo

cd: Nos permite navegar entre carpetas.
- cd /: Ir a la ruta principal:
- cd o cd ~: Ir a la ruta de tu usuario
- cd carpeta/subcarpeta: Navegar a una ruta dentro de la carpeta donde estamos ahora mismo.
- cd .. (cd + dos puntos): Regresar una carpeta hacia atrás.
- Si quieres referirte al directorio en el que te encuentras ahora mismo puedes usar cd . (cd + un punto).

history: Ver los últimos comandos que ejecutamos y un número especial con el que podemos repetir su ejecución.

! + número: Ejecutar algún comando con el número que nos muestra el comando history (por ejemplo, !72).

clear: Para limpiar la terminal. También podemos usar los atajos de teclado Ctrl + L o Command + L.

comando --help: ayuda sobre el comando